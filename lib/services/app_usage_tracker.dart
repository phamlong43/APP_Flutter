import 'dart:async';
import 'dart:convert';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:flutter/material.dart';

class AppUsageTracker {
  static AppUsageTracker? _instance;
  static AppUsageTracker get instance => _instance ??= AppUsageTracker._();
  AppUsageTracker._();

  Timer? _timer;
  DateTime? _sessionStartTime;
  int _totalUsageToday = 0;
  int _currentSessionDuration = 0;
  bool _isWarningShown = false;
  
  // Callback ƒë·ªÉ hi·ªÉn th·ªã c·∫£nh b√°o
  Function()? _onWarning;
  Function(int minutes)? onUsageWarning;
  Function(int minutes)? onUsageLimit;

  static const int WARNING_MINUTES = 100; // C·∫£nh b√°o ·ªü 100 ph√∫t
  static const int LIMIT_MINUTES = 120;   // Gi·ªõi h·∫°n ·ªü 120 ph√∫t
  static const int WARNING_DURATION = WARNING_MINUTES; // Alias cho t∆∞∆°ng th√≠ch
  
  static const String _prefKey = 'app_usage_data';

  /// Kh·ªüi t·∫°o tracker khi app b·∫Øt ƒë·∫ßu
  Future<void> initTracker() async {
    await _loadUsageData();
    _startSession();
    _startTimer();
  }

  /// D·ª´ng tracker khi app t·∫Øt
  Future<void> stopTracker() async {
    await _endSession();
    _timer?.cancel();
  }

  /// B·∫Øt ƒë·∫ßu timer ƒë·ªÉ theo d√µi th·ªùi gian
  void _startTimer() {
    _timer?.cancel();
    _timer = Timer.periodic(Duration(seconds: 30), (timer) {
      if (_sessionStartTime != null) {
        _updateCurrentSession();
        _checkWarnings();
      }
    });
  }

  /// C·∫≠p nh·∫≠t th·ªùi gian session hi·ªán t·∫°i
  void _updateCurrentSession() {
    if (_sessionStartTime == null) return;
    
    final now = DateTime.now();
    _currentSessionDuration = now.difference(_sessionStartTime!).inMinutes;
  }

  /// Ki·ªÉm tra v√† hi·ªÉn th·ªã c·∫£nh b√°o
  void _checkWarnings() {
    final currentTotal = (_totalUsageToday - _currentSessionDuration) + _currentSessionDuration;
    
    if (currentTotal >= WARNING_DURATION && !_isWarningShown) {
      _showUsageWarning();
      _isWarningShown = true;
    }
  }

  /// K·∫øt th√∫c session
  Future<void> _endSession() async {
    if (_sessionStartTime == null) return;
    
    final sessionEnd = DateTime.now();
    final finalDuration = sessionEnd.difference(_sessionStartTime!).inMinutes;
    
    _totalUsageToday = (_totalUsageToday - _currentSessionDuration) + finalDuration;
    _currentSessionDuration = 0;
    _sessionStartTime = null;
    
    await _saveUsageData();
    print('üî¥ Session ended. Total today: ${_totalUsageToday}min');
  }

  /// B·∫Øt ƒë·∫ßu phi√™n s·ª≠ d·ª•ng
  void _startSession() {
    _sessionStartTime = DateTime.now();
    print('üì± App session started at: $_sessionStartTime');
  }

  /// D·ª´ng theo d√µi session
  void stopTracking() {
    if (_sessionStartTime == null) return;
    
    _timer?.cancel();
    _timer = null;
    
    // T√≠nh th·ªùi gian session cu·ªëi c√πng
    final sessionEnd = DateTime.now();
    final finalDuration = sessionEnd.difference(_sessionStartTime!).inMinutes;
    
    _totalUsageToday = (_totalUsageToday - _currentSessionDuration) + finalDuration;
    _currentSessionDuration = 0;
    _sessionStartTime = null;
    
    _saveUsageData();
    print('üî¥ Stopped tracking app usage. Total today: ${_totalUsageToday}min');
  }

  /// L·∫•y th√¥ng tin s·ª≠ d·ª•ng hi·ªán t·∫°i
  Map<String, dynamic> getCurrentUsage() {
    int currentTotal = _totalUsageToday;
    
    // N·∫øu ƒëang trong session, t√≠nh th√™m th·ªùi gian hi·ªán t·∫°i
    if (_sessionStartTime != null) {
      final currentSessionTime = DateTime.now().difference(_sessionStartTime!).inMinutes;
      currentTotal = (_totalUsageToday - _currentSessionDuration) + currentSessionTime;
    }
    
    return {
      'totalMinutesToday': currentTotal,
      'totalHoursToday': (currentTotal / 60).toStringAsFixed(1),
      'isOverLimit': currentTotal >= WARNING_DURATION,
      'remainingMinutes': WARNING_DURATION - currentTotal,
      'warningLimit': WARNING_DURATION,
    };
  }

  /// Thi·∫øt l·∫≠p callback cho c·∫£nh b√°o
  void setWarningCallback(Function() callback) {
    _onWarning = callback;
  }

  /// Hi·ªÉn th·ªã c·∫£nh b√°o s·ª≠ d·ª•ng qu√° l√¢u
  void _showUsageWarning() {
    final usage = getCurrentUsage();
    print('‚ö†Ô∏è USAGE WARNING: ${usage['totalMinutesToday']} minutes (${usage['totalHoursToday']} hours)');
    
    if (_onWarning != null) {
      _onWarning!();
    }
  }

  /// L∆∞u d·ªØ li·ªáu s·ª≠ d·ª•ng
  Future<void> _saveUsageData() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final today = DateTime.now().toIso8601String().substring(0, 10);
      
      final data = {
        'date': today,
        'totalMinutes': _totalUsageToday,
        'lastUpdated': DateTime.now().toIso8601String(),
      };
      
      await prefs.setString(_prefKey, jsonEncode(data));
    } catch (e) {
      print('‚ùå Error saving usage data: $e');
    }
  }

  /// T·∫£i d·ªØ li·ªáu s·ª≠ d·ª•ng
  Future<void> _loadUsageData() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final dataString = prefs.getString(_prefKey);
      
      if (dataString != null) {
        final data = jsonDecode(dataString);
        final savedDate = data['date'] as String;
        final today = DateTime.now().toIso8601String().substring(0, 10);
        
        if (savedDate == today) {
          // C√πng ng√†y, ti·∫øp t·ª•c t·ª´ d·ªØ li·ªáu c≈©
          _totalUsageToday = data['totalMinutes'] ?? 0;
          print('üìä Loaded usage data: ${_totalUsageToday} minutes today');
        } else {
          // Ng√†y m·ªõi, reset v·ªÅ 0
          _totalUsageToday = 0;
          print('üìä New day, reset usage counter');
        }
      } else {
        _totalUsageToday = 0;
        print('üìä No usage data found, starting fresh');
      }
    } catch (e) {
      print('‚ùå Error loading usage data: $e');
      _totalUsageToday = 0;
    }
  }

  /// Reset d·ªØ li·ªáu s·ª≠ d·ª•ng (ch·ªâ d√πng ƒë·ªÉ test)
  Future<void> resetUsageData() async {
    _totalUsageToday = 0;
    _currentSessionDuration = 0;
    _isWarningShown = false;
    
    final prefs = await SharedPreferences.getInstance();
    await prefs.remove(_prefKey);
    
    print('üîÑ Usage data reset');
  }

  /// Th√™m th·ªùi gian test (ch·ªâ d√πng ƒë·ªÉ test)
  void addTestMinutes(int minutes) {
    _totalUsageToday += minutes;
    _saveUsageData();
    
    // Ki·ªÉm tra c·∫£nh b√°o
    if (_totalUsageToday >= WARNING_DURATION && !_isWarningShown) {
      _showUsageWarning();
      _isWarningShown = true;
    }
    
    print('üß™ Added ${minutes} test minutes. Total: ${_totalUsageToday}min');
  }

  /// Cleanup khi app b·ªã ƒë√≥ng
  void dispose() {
    stopTracking();
  }
}
