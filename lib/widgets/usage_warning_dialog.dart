import 'package:flutter/material.dart';
import '../services/app_usage_tracker_new.dart';

class UsageWarningDialog extends StatelessWidget {
  final int usageMinutes;
  final bool isLimit;

  const UsageWarningDialog({
    Key? key,
    required this.usageMinutes,
    this.isLimit = false,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      backgroundColor: Colors.white,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(16),
      ),
      title: Row(
        children: [
          Icon(
            isLimit ? Icons.warning : Icons.access_time,
            color: isLimit ? Colors.red : Colors.orange,
            size: 28,
          ),
          const SizedBox(width: 8),
          Text(
            isLimit ? 'Gi·ªõi h·∫°n s·ª≠ d·ª•ng!' : 'C·∫£nh b√°o th·ªùi gian!',
            style: TextStyle(
              color: isLimit ? Colors.red : Colors.orange[700],
              fontWeight: FontWeight.bold,
            ),
          ),
        ],
      ),
      content: Column(
        mainAxisSize: MainAxisSize.min,
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: isLimit ? Colors.red[50] : Colors.orange[50],
              borderRadius: BorderRadius.circular(12),
              border: Border.all(
                color: isLimit ? Colors.red[200]! : Colors.orange[200]!,
              ),
            ),
            child: Column(
              children: [
                Text(
                  'B·∫°n ƒë√£ s·ª≠ d·ª•ng ·ª©ng d·ª•ng:',
                  style: const TextStyle(fontSize: 16),
                ),
                const SizedBox(height: 8),
                Text(
                  '$usageMinutes ph√∫t (${(usageMinutes / 60).toStringAsFixed(1)} gi·ªù)',
                  style: TextStyle(
                    fontSize: 20,
                    fontWeight: FontWeight.bold,
                    color: isLimit ? Colors.red : Colors.orange[700],
                  ),
                ),
              ],
            ),
          ),
          
          const SizedBox(height: 16),
          
          Text(
            isLimit 
              ? 'üö® B·∫°n ƒë√£ v∆∞·ª£t qu√° gi·ªõi h·∫°n 120 ph√∫t (2 gi·ªù) s·ª≠ d·ª•ng trong ng√†y!'
              : '‚ö†Ô∏è B·∫°n s·∫Øp ƒë·∫°t gi·ªõi h·∫°n 120 ph√∫t s·ª≠ d·ª•ng trong ng√†y.',
            style: TextStyle(
              fontSize: 14,
              color: Colors.grey[700],
            ),
          ),
          
          const SizedBox(height: 16),
          
          Container(
            padding: const EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: Colors.blue[50],
              borderRadius: BorderRadius.circular(8),
              border: Border.all(color: Colors.blue[200]!),
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  children: [
                    Icon(Icons.lightbulb_outline, color: Colors.blue[700], size: 18),
                    const SizedBox(width: 6),
                    const Text(
                      'G·ª£i √Ω cho s·ª©c kh·ªèe:',
                      style: TextStyle(fontWeight: FontWeight.bold, fontSize: 13),
                    ),
                  ],
                ),
                const SizedBox(height: 8),
                const Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text('‚Ä¢ Ngh·ªâ ng∆°i 5-10 ph√∫t', style: TextStyle(fontSize: 12)),
                    Text('‚Ä¢ Nh√¨n xa ƒë·ªÉ th∆∞ gi√£n m·∫Øt', style: TextStyle(fontSize: 12)),
                    Text('‚Ä¢ U·ªëng n∆∞·ªõc v√† v·∫≠n ƒë·ªông nh·∫π', style: TextStyle(fontSize: 12)),
                    Text('‚Ä¢ Quay l·∫°i l√†m vi·ªác sau', style: TextStyle(fontSize: 12)),
                  ],
                ),
              ],
            ),
          ),
        ],
      ),
      actions: [
        TextButton(
          onPressed: () => Navigator.of(context).pop(),
          child: const Text('ƒê√£ hi·ªÉu'),
        ),
        if (!isLimit)
          ElevatedButton(
            onPressed: () {
              Navigator.of(context).pop();
              _showUsageStats(context);
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.orange[600],
              foregroundColor: Colors.white,
            ),
            child: const Text('Xem th·ªëng k√™'),
          ),
        if (isLimit)
          ElevatedButton(
            onPressed: () => Navigator.of(context).pop(),
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.red[600],
              foregroundColor: Colors.white,
            ),
            child: const Text('T·∫°m d·ª´ng'),
          ),
      ],
    );
  }

  void _showUsageStats(BuildContext context) {
    final stats = AppUsageTracker.instance.getUsageStats();
    
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Row(
          children: [
            Icon(Icons.analytics, color: Colors.blue),
            SizedBox(width: 8),
            Text('Th·ªëng k√™ s·ª≠ d·ª•ng h√¥m nay'),
          ],
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            _buildStatRow('Th·ªùi gian ƒë√£ d√πng', '${stats['currentMinutes']} ph√∫t'),
            _buildStatRow('Th·ªùi gian c√≤n l·∫°i', '${stats['remainingMinutes']} ph√∫t'),
            _buildStatRow('Tr·∫°ng th√°i', stats['isOverLimit'] ? 'V∆∞·ª£t gi·ªõi h·∫°n' : 'B√¨nh th∆∞·ªùng'),
            const SizedBox(height: 16),
            LinearProgressIndicator(
              value: (stats['currentMinutes'] as int) / AppUsageTracker.LIMIT_MINUTES,
              backgroundColor: Colors.grey[300],
              valueColor: AlwaysStoppedAnimation<Color>(
                (stats['isOverLimit'] as bool) ? Colors.red : Colors.green,
              ),
            ),
            const SizedBox(height: 8),
            Text(
              'Ti·∫øn ƒë·ªô: ${((stats['currentMinutes'] as int) / AppUsageTracker.LIMIT_MINUTES * 100).round()}%',
              style: const TextStyle(fontSize: 12),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('ƒê√≥ng'),
          ),
        ],
      ),
    );
  }

  Widget _buildStatRow(String label, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(label, style: const TextStyle(fontSize: 14)),
          Text(
            value,
            style: const TextStyle(
              fontSize: 14,
              fontWeight: FontWeight.bold,
            ),
          ),
        ],
      ),
    );
  }
}

/// Helper function ƒë·ªÉ hi·ªÉn th·ªã c·∫£nh b√°o s·ª≠ d·ª•ng
void showUsageWarning(BuildContext context, int minutes, {bool isLimit = false}) {
  showDialog(
    context: context,
    barrierDismissible: false,
    builder: (context) => UsageWarningDialog(
      usageMinutes: minutes,
      isLimit: isLimit,
    ),
  );
}

class OldUsageWarningDialog {
  /// Hi·ªÉn th·ªã dialog c·∫£nh b√°o s·ª≠ d·ª•ng qu√° l√¢u
  static void show(BuildContext context) {
  final stats = AppUsageTracker.instance.getUsageStats();
    
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => AlertDialog(
        title: Row(
          children: [
            Icon(Icons.access_time, color: Colors.orange[600]),
            const SizedBox(width: 8),
            const Text('C·∫£nh b√°o th·ªùi gian s·ª≠ d·ª•ng'),
          ],
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Container(
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Colors.orange[50],
                borderRadius: BorderRadius.circular(8),
                border: Border.all(color: Colors.orange[200]!),
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    children: [
                      Icon(Icons.warning, color: Colors.orange[700], size: 20),
                      const SizedBox(width: 8),
                      const Text(
                        'B·∫°n ƒë√£ s·ª≠ d·ª•ng ·ª©ng d·ª•ng qu√° l√¢u!',
                        style: TextStyle(fontWeight: FontWeight.bold),
                      ),
                    ],
                  ),
                  const SizedBox(height: 12),
                  Text(
                    '‚è∞ Th·ªùi gian h√¥m nay: '
                    '${(((stats['currentMinutes'] ?? 0) as int) / 60).toStringAsFixed(1)} gi·ªù',
                  ),
                  Text('üìù Gi·ªõi h·∫°n khuy·∫øn ngh·ªã: ${AppUsageTracker.WARNING_MINUTES ~/ 60} gi·ªù'),
                  const SizedBox(height: 8),
                  Container(
                    padding: const EdgeInsets.all(8),
                    decoration: BoxDecoration(
                      color: Colors.red[50],
                      borderRadius: BorderRadius.circular(6),
                      border: Border.all(color: Colors.red[200]!),
                    ),
                    child: const Text(
                      'S·ª≠ d·ª•ng thi·∫øt b·ªã qu√° l√¢u c√≥ th·ªÉ g√¢y h·∫°i cho s·ª©c kh·ªèe m·∫Øt v√† t∆∞ th·∫ø.',
                      style: TextStyle(fontSize: 12, color: Colors.red),
                    ),
                  ),
                ],
              ),
            ),
            const SizedBox(height: 16),
            const Text(
              'üí° Khuy·∫øn ngh·ªã:',
              style: TextStyle(fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 8),
            const Text('‚Ä¢ Ngh·ªâ ng∆°i 15-20 ph√∫t'),
            const Text('‚Ä¢ Nh√¨n xa ƒë·ªÉ th∆∞ gi√£n m·∫Øt'),
            const Text('‚Ä¢ V·∫≠n ƒë·ªông c∆° th·ªÉ nh·∫π nh√†ng'),
            const Text('‚Ä¢ U·ªëng n∆∞·ªõc v√† th·ªü s√¢u'),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('Ti·∫øp t·ª•c s·ª≠ d·ª•ng'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.of(context).pop();
              // C√≥ th·ªÉ th√™m logic pause app ·ªü ƒë√¢y
              _showBreakReminder(context);
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.green[600],
              foregroundColor: Colors.white,
            ),
            child: const Text('Ngh·ªâ ng∆°i ngay'),
          ),
        ],
      ),
    );
  }

  /// Hi·ªÉn th·ªã l·ªùi nh·∫Øc ngh·ªâ ng∆°i
  static void _showBreakReminder(BuildContext context) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Row(
          children: [
            Icon(Icons.spa, color: Colors.green[600]),
            const SizedBox(width: 8),
            const Text('Th·ªùi gian ngh·ªâ ng∆°i'),
          ],
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icon(Icons.self_improvement, size: 64, color: Colors.green[600]),
            const SizedBox(height: 16),
            const Text(
              'H√£y d√†nh 15-20 ph√∫t ƒë·ªÉ ngh·ªâ ng∆°i.\n·∫¢nh h∆∞·ªüng t√≠ch c·ª±c ƒë·∫øn s·ª©c kh·ªèe!',
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 16),
            Container(
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Colors.green[50],
                borderRadius: BorderRadius.circular(8),
              ),
              child: const Column(
                children: [
                  Text('üßò Th∆∞ gi√£n m·∫Øt: Nh√¨n xa 20 gi√¢y'),
                  Text('üö∂ ƒêi b·ªô nh·∫π quanh ph√≤ng'),
                  Text('üíß U·ªëng m·ªôt ly n∆∞·ªõc'),
                  Text('ü´Å Th·ªü s√¢u 5-10 l·∫ßn'),
                ],
              ),
            ),
          ],
        ),
        actions: [
          ElevatedButton(
            onPressed: () => Navigator.of(context).pop(),
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.green[600],
              foregroundColor: Colors.white,
            ),
            child: const Text('ƒê√£ hi·ªÉu'),
          ),
        ],
      ),
    );
  }
}

/// Widget hi·ªÉn th·ªã th·ªëng k√™ s·ª≠ d·ª•ng ·ª©ng d·ª•ng
class UsageStatsWidget extends StatefulWidget {
  const UsageStatsWidget({Key? key}) : super(key: key);

  @override
  State<UsageStatsWidget> createState() => _UsageStatsWidgetState();
}

class _UsageStatsWidgetState extends State<UsageStatsWidget> {
  Map<String, dynamic> _usage = {};

  @override
  void initState() {
    super.initState();
    _updateUsage();
  }

  void _updateUsage() {
    setState(() {
  _usage = AppUsageTracker.instance.getUsageStats();
    });
  }

  @override
  Widget build(BuildContext context) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(Icons.access_time, color: Colors.blue[600]),
                const SizedBox(width: 8),
                const Text(
                  'Th·ªëng k√™ s·ª≠ d·ª•ng h√¥m nay',
                  style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                ),
              ],
            ),
            const SizedBox(height: 12),
            
            // Th·ªùi gian s·ª≠ d·ª•ng
            Container(
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: (_usage['isOverLimit'] ?? false) 
                  ? Colors.red[50] 
                  : Colors.blue[50],
                borderRadius: BorderRadius.circular(8),
                border: Border.all(
                  color: (_usage['isOverLimit'] ?? false) 
                    ? Colors.red[200]! 
                    : Colors.blue[200]!,
                ),
              ),
              child: Column(
                children: [
                  Text(
                    '${((_usage['currentMinutes'] ?? 0) / 60).toStringAsFixed(1)} gi·ªù',
                    style: TextStyle(
                      fontSize: 24,
                      fontWeight: FontWeight.bold,
                      color: (_usage['isOverLimit'] ?? false) 
                        ? Colors.red[700] 
                        : Colors.blue[700],
                    ),
                  ),
                  Text(
                    '${_usage['currentMinutes'] ?? 0} ph√∫t',
                    style: TextStyle(color: Colors.grey[600]),
                  ),
                ],
              ),
            ),
            
            const SizedBox(height: 12),
            
            // Progress bar
            LinearProgressIndicator(
              value: (_usage['currentMinutes'] ?? 0) / AppUsageTracker.WARNING_MINUTES,
              backgroundColor: Colors.grey[300],
              valueColor: AlwaysStoppedAnimation<Color>(
                (_usage['isOverLimit'] ?? false) 
                  ? Colors.red 
                  : Colors.blue,
              ),
            ),
            
            const SizedBox(height: 8),
            
            // Th√¥ng tin th√™m
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text(
                  'Gi·ªõi h·∫°n: ${AppUsageTracker.WARNING_MINUTES} ph√∫t',
                  style: TextStyle(fontSize: 12, color: Colors.grey[600]),
                ),
                Text(
                  (_usage['isOverLimit'] ?? false)
                    ? 'V∆∞·ª£t ${((_usage['currentMinutes'] ?? 0) - AppUsageTracker.WARNING_MINUTES).abs()} ph√∫t'
                    : 'C√≤n ${_usage['remainingMinutes'] ?? 0} ph√∫t',
                  style: TextStyle(
                    fontSize: 12,
                    color: (_usage['isOverLimit'] ?? false) 
                      ? Colors.red 
                      : Colors.green,
                    fontWeight: FontWeight.w500,
                  ),
                ),
              ],
            ),
            
            const SizedBox(height: 12),
            
            // Buttons
            Row(
              children: [
                Expanded(
                  child: OutlinedButton.icon(
                    onPressed: _updateUsage,
                    icon: const Icon(Icons.refresh),
                    label: const Text('C·∫≠p nh·∫≠t'),
                  ),
                ),
                const SizedBox(width: 8),
                Expanded(
                  child: ElevatedButton.icon(
                    onPressed: () {
                      // Th√™m 30 ph√∫t test
                      AppUsageTracker.instance.addTestMinutes(30);
                      _updateUsage();
                    },
                    icon: const Icon(Icons.add),
                    label: const Text('Test +30p'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.orange,
                      foregroundColor: Colors.white,
                    ),
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
}
